{"version":3,"sources":["ducks/physicians/types.ts","Steps/Response.tsx","Steps/Step0.tsx","Steps/Step1.tsx","Steps/Step2.tsx","ducks/cantons/types.ts","ducks/physicians/actions.ts","ducks/physicians/operations.ts","ducks/physicians/index.ts","ducks/physicians/reducers.ts","ducks/cantons/actions.ts","ducks/cantons/operations.ts","ducks/cantons/index.ts","ducks/cantons/reducers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["actionTypes","useStyles","makeStyles","theme","response","display","alignItems","marginLeft","Response","setResponse","setIsEditing","classes","className","Paper","style","padding","fontSize","onClick","e","Step0","setCurrentStep","options","isEditing","Autocomplete","getOptionLabel","option","width","onChange","value","renderInput","params","TextField","label","variant","Step1","useState","isInvalidInput","setInvalidInput","event","input","enteredZip","target","length","startsWith","setTimeout","error","type","Step2","ProductDoctorname","ProductDoctorCom","isFetchAction","action","PHYSICIANS_FETCH","physicians","payload","dispatch","fetch","then","r","json","actions","physiciansReducer","state","CANTONS_FETCH","cantons","cantonsReducer","toolbar","backgroundColor","minHeight","title","flexGrow","content","marginTop","borderRadius","lanes","orange","color","palette","getContrastText","deepOrange","bot","step","flexDirection","position","top","App","currentStep","step0Response","setStep0Response","step1Response","setStep1Response","step2Response","setStep2Response","step0IsEditing","setStep0IsEditing","step1IsEditing","setStep1IsEditing","step2IsEditing","setStep2IsEditing","useDispatch","useEffect","physiciansOperations","cantonsOperations","useSelector","AppBar","Toolbar","Typography","Avatar","alt","key","slice","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","ducks","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.55897e8f.chunk.js","sourcesContent":["export enum actionTypes {\n  PHYSICIANS_FETCH = \"@PHYSICIANS/fetch\",\n}\n\nexport interface IPhysician {\n  ProductDoctorname?: string;\n  ProductDoctorId?: number;\n  ProductDoctorAddress?: string;\n  ProductDoctorZip?: string;\n  ProductDoctorCom?: string;\n  Phone?: string;\n  TariffName?: string;\n}\n\nexport type IPhysiciansStore = IPhysician[];\n\ninterface IAction {\n  type: actionTypes;\n}\n\ninterface IActionFetch extends IAction {\n  payload: IPhysician[];\n}\n\n// TYPE GUARDS\nexport const isFetchAction = (action: IAction): action is IActionFetch =>\n  action.type === actionTypes.PHYSICIANS_FETCH;\n","import React, { FunctionComponent } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CreateRoundedIcon from \"@material-ui/icons/CreateRounded\";\nimport { Theme, makeStyles } from \"@material-ui/core\";\nimport { IResponseProps } from \"./StepType\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  response: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    \"&> svg\": {\n      marginLeft: \"10px\",\n    },\n  },\n}));\n\nconst Response: FunctionComponent<IResponseProps> = ({\n  response,\n  setResponse,\n  setIsEditing,\n}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.response}>\n      <Paper style={{ padding: \"20px\" }}>{response}</Paper>\n      <CreateRoundedIcon\n        fontSize=\"small\"\n        onClick={(e) => {\n          setIsEditing(true);\n          setResponse(null);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Response;\n","import React, { FunctionComponent } from \"react\";\nimport MapRoundedIcon from \"@material-ui/icons/MapRounded\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport Response from \"./Response\";\n\nimport { IStepProps } from \"./StepType\";\n\nconst Step0: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n  options,\n  isEditing,\n  setIsEditing,\n}) => {\n  const onChangeHandler = (e: any, value: any) => {\n    setResponse(value);\n    !isEditing && setCurrentStep(1);\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <MapRoundedIcon fontSize=\"large\" /> Im welchem Kanton wohnst du ?\n        </span>\n      </div>\n\n      <div>\n        {response ? (\n          <Response\n            response={response}\n            setIsEditing={setIsEditing}\n            setResponse={setResponse}\n          />\n        ) : (\n          <Autocomplete\n            options={options}\n            getOptionLabel={(option: string) => option}\n            style={{ width: 300 }}\n            onChange={onChangeHandler}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"WÃ¤hle bitte deinen Kanton\"\n                variant=\"outlined\"\n              />\n            )}\n          />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Step0;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { IStepProps } from \"./StepType\";\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Response from \"./Response\";\n\nconst validation = (input: string | undefined) =>\n  input && input.length === 4 && !input.startsWith(\"0\");\n\nconst Step1: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n  isEditing,\n  setIsEditing,\n}) => {\n  const [isInvalidInput, setInvalidInput] = useState<boolean>(false);\n\n  const onChangeHandler = (event: any) => {\n    const enteredZip = event.target.value;\n\n    if (!validation(enteredZip)) {\n      setInvalidInput(true);\n    } else {\n      setInvalidInput(false);\n\n      setTimeout(() => {\n        setResponse(enteredZip);\n        !isEditing && setCurrentStep(2);\n      }, 500);\n    }\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <RoomRoundedIcon fontSize=\"large\" /> Was ist die Postleitzahl deines\n          Wohnortes ?\n        </span>\n      </div>\n\n      <div>\n        {response ? (\n          <Response\n            response={response}\n            setIsEditing={setIsEditing}\n            setResponse={setResponse}\n          />\n        ) : (\n          <TextField\n            onChange={onChangeHandler}\n            error={isInvalidInput}\n            label=\"PLZ\"\n            type=\"number\"\n            variant=\"outlined\"\n          />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Step1;\n","import React, { FunctionComponent } from \"react\";\nimport LocalHospitalRoundedIcon from \"@material-ui/icons/LocalHospitalRounded\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Response from \"./Response\";\nimport { IPhysician } from \"../ducks/physicians/types\";\nimport { IStepProps } from \"./StepType\";\n\nconst Step2: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n  options,\n  isEditing,\n  setIsEditing,\n}) => {\n  const onChangeHandler = (e: any, value: any) => {\n    setResponse(`${value?.ProductDoctorname}, ${value?.ProductDoctorCom}`);\n    !isEditing && setCurrentStep(2);\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <LocalHospitalRoundedIcon fontSize=\"large\" /> WÃ¤hle einen Artz / eine\n          Artzin ?\n        </span>\n      </div>\n\n      <div>\n        {response ? (\n          <Response\n            response={response}\n            setIsEditing={setIsEditing}\n            setResponse={setResponse}\n          />\n        ) : (\n          <Autocomplete\n            options={options}\n            getOptionLabel={(option: IPhysician) =>\n              `${option?.ProductDoctorname}, ${option?.ProductDoctorCom}` || \"\"\n            }\n            style={{ width: 300 }}\n            onChange={onChangeHandler}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Suche nach einem/er Artz/in\"\n                variant=\"outlined\"\n              />\n            )}\n          />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Step2;\n","export enum actionTypes {\n  CANTONS_FETCH = \"@CANTONS/fetch\",\n}\n\nexport type ICanton = string;\n\nexport type ICantonsStore = ICanton[];\n\ninterface IAction {\n  type: actionTypes;\n}\n\ninterface IActionFetch extends IAction {\n  payload: ICanton[];\n}\n\n// TYPE GUARDS\nexport const isFetchAction = (action: IAction): action is IActionFetch =>\n  action.type === actionTypes.CANTONS_FETCH;\n","import { actionTypes, IPhysician } from \"./types\";\n\nconst makePhysiciansFetch = (physicians: IPhysician[]) => ({\n  type: actionTypes.PHYSICIANS_FETCH,\n  payload: physicians,\n});\n\nexport default {\n  makePhysiciansFetch,\n};\n","import { Dispatch } from \"redux\";\nimport actions from \"./actions\";\n\nconst fetchPhysicians = () => (dispatch: Dispatch) => {\n  fetch(\"https://sakai-san.github.io/artzsuche/physicians.json\")\n    .then((r) => r.json())\n    .then((r) => dispatch(actions.makePhysiciansFetch(r || [])));\n};\n\nexport default { fetchPhysicians };\n","import physiciansReducer from \"./reducers\";\nexport { default as physiciansActions } from \"./actions\";\nexport { default as physiciansOperations } from \"./operations\";\nexport default physiciansReducer;\n","import { Reducer } from \"redux\";\nimport actions from \"./actions\";\nimport { IPhysiciansStore, isFetchAction } from \"./types\";\n\nconst reducer: Reducer<\n  IPhysiciansStore,\n  ReturnType<typeof actions.makePhysiciansFetch>\n> = (state = [], action) => {\n  if (isFetchAction(action)) {\n    return [...action.payload];\n  } else {\n    return state;\n  }\n};\n\nexport default reducer;\n","import { actionTypes, ICanton } from \"./types\";\n\nconst makeCantonsFetch = (cantons: ICanton[]) => ({\n  type: actionTypes.CANTONS_FETCH,\n  payload: cantons,\n});\n\nexport default {\n  makeCantonsFetch,\n};\n","import { Dispatch } from \"redux\";\nimport actions from \"./actions\";\n\nconst fetchCantons = () => (dispatch: Dispatch) => {\n  fetch(\"https://sakai-san.github.io/artzsuche/cantons.json\")\n    .then((r) => r.json())\n    .then((r) => dispatch(actions.makeCantonsFetch(r || [])));\n};\n\nexport default { fetchCantons };\n","import cantonsReducer from \"./reducers\";\nexport { default as cantonsActions } from \"./actions\";\nexport { default as cantonsOperations } from \"./operations\";\nexport default cantonsReducer;\n","import { Reducer } from \"redux\";\nimport actions from \"./actions\";\nimport { ICantonsStore, isFetchAction } from \"./types\";\n\nconst reducer: Reducer<\n  ICantonsStore,\n  ReturnType<typeof actions.makeCantonsFetch>\n> = (state = [], action) => {\n  if (isFetchAction(action)) {\n    return [...action.payload];\n  } else {\n    return state;\n  }\n};\n\nexport default reducer;\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Step0 from \"./Steps/Step0\";\nimport Step1 from \"./Steps/Step1\";\nimport Step2 from \"./Steps/Step2\";\nimport { useDispatch } from \"react-redux\";\nimport { Theme, makeStyles } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ForumIcon from \"@material-ui/icons/Forum\";\nimport { deepOrange } from \"@material-ui/core/colors\";\nimport { physiciansOperations } from \"./ducks/physicians\";\nimport { cantonsOperations } from \"./ducks/cantons\";\nimport { IPhysician } from \"./ducks/physicians/types\";\nimport { ICanton } from \"./ducks/cantons/types\";\nimport { IReduxStore } from \"./ducks/reduxStore\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  toolbar: {\n    backgroundColor: \"#FF51A1\",\n    minHeight: 80,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    width: \"90%\",\n    padding: \"40px\",\n    \"&>section:not(:first-child)\": {\n      padding: \"5px\",\n      marginTop: \"30px\",\n      borderRadius: \"6px 6px\",\n    },\n  },\n  lanes: {\n    display: \"flex\",\n    \"&>div:last-child\": {\n      marginLeft: \"auto\",\n    },\n  },\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  bot: {\n    fontSize: \"35px\",\n  },\n  step: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"&>div:nth-child(2)\": {\n      marginLeft: \"auto\",\n    },\n    \"& svg\": {\n      position: \"relative\",\n      top: \"6px\",\n    },\n  },\n}));\n\nconst App: FunctionComponent = () => {\n  const classes = useStyles();\n\n  const [currentStep, setCurrentStep] = useState<number>(0);\n\n  const [step0Response, setStep0Response] = useState<string | null>(null);\n  const [step1Response, setStep1Response] = useState<string | null>(null);\n  const [step2Response, setStep2Response] = useState<string | null>(null);\n\n  const [step0IsEditing, setStep0IsEditing] = useState<boolean>(false);\n  const [step1IsEditing, setStep1IsEditing] = useState<boolean>(false);\n  const [step2IsEditing, setStep2IsEditing] = useState<boolean>(false);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(physiciansOperations.fetchPhysicians());\n    dispatch(cantonsOperations.fetchCantons());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const physicians: IPhysician[] = useSelector(\n    (state: IReduxStore) => state.physicians\n  );\n  const cantons: ICanton[] = useSelector((state: IReduxStore) => state.cantons);\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n            Lass uns diskutieren\n          </Typography>\n          <ForumIcon fontSize=\"large\" />\n        </Toolbar>\n      </AppBar>\n\n      <div className={classes.content}>\n        <section className={classes.lanes}>\n          <div>\n            <Avatar alt=\"bot\" className={classes.bot}>\n              <span>&#129302;</span>\n            </Avatar>\n          </div>\n          <div>\n            <Avatar alt=\"you\" className={classes.orange}>\n              Du\n            </Avatar>\n          </div>\n        </section>\n        {[\n          <Step0\n            className={classes.step}\n            key=\"step0\"\n            response={step0Response}\n            setResponse={setStep0Response}\n            setCurrentStep={setCurrentStep}\n            options={cantons}\n            isEditing={step0IsEditing}\n            setIsEditing={setStep0IsEditing}\n          />,\n          <Step1\n            className={classes.step}\n            key=\"step1\"\n            response={step1Response}\n            setResponse={setStep1Response}\n            setCurrentStep={setCurrentStep}\n            isEditing={step1IsEditing}\n            setIsEditing={setStep1IsEditing}\n          />,\n          <Step2\n            className={classes.step}\n            key=\"step2\"\n            response={step2Response}\n            setResponse={setStep2Response}\n            setCurrentStep={setCurrentStep}\n            options={physicians}\n            isEditing={step2IsEditing}\n            setIsEditing={setStep2IsEditing}\n          />,\n        ].slice(0, currentStep + 1)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport * as ducks from \"./ducks/index\";\nimport { compose, createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers(ducks),\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}