{"version":3,"sources":["Steps/Step0.tsx","Steps/Step1.tsx","Steps/Step2.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Step0","response","setResponse","setCurrentStep","className","fontSize","Autocomplete","options","cantons","getOptionLabel","option","style","width","onChange","e","value","renderInput","params","TextField","label","variant","Paper","padding","Step1","useState","isInvalidInput","setInvalidInput","event","input","enteredZip","target","length","startsWith","error","type","Step2","physicians","ProductDoctorname","ProductDoctorCom","styles","createStyles","theme","root","marginTop","borderRadius","border","lanes","display","marginLeft","orange","color","palette","getContrastText","deepOrange","backgroundColor","bot","step","flexDirection","position","top","App","withStyles","classes","currentStep","step0Response","setStep0Response","step1Response","setStep1Response","step2Response","setStep2Response","Avatar","alt","key","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"y+oNAmDeA,EA3C8B,SAAC,GAKvC,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,eACAC,EACI,EADJA,UAOA,OACE,6BAASA,UAAWA,GAClB,6BACE,8BACE,kBAAC,IAAD,CAAmBC,SAAS,UAD9B,mCAGEJ,GACA,kBAACK,EAAA,EAAD,CACEC,QAASC,EACTC,eAAgB,SAACC,GAAD,OAAoBA,GACpCC,MAAO,CAAEC,MAAO,KAChBC,SAhBc,SAACC,EAAQC,GAC/Bb,EAAYa,GACZZ,EAAe,IAePa,YAAa,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,MAAM,+BACNC,QAAQ,kBAOjBnB,GACC,6BACE,kBAACoB,EAAA,EAAD,CAAOV,MAAO,CAAEW,QAAS,SAAWrB,M,iBCa/BsB,EAnD8B,SAAC,GAKvC,IAJLtB,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,eACAC,EACI,EADJA,UACI,EACsCoB,oBAAkB,GADxD,mBACGC,EADH,KACmBC,EADnB,KAkBJ,OACE,6BAAStB,UAAWA,GAClB,6BACE,8BACE,kBAAC,IAAD,CAAiBC,SAAS,UAD5B,iDAKEJ,GACA,kBAACiB,EAAA,EAAD,CACEL,SAtBc,SAACc,GACvB,IAJkBC,EAIZC,EAAaF,EAAMG,OAAOf,QAJda,EAMFC,IALU,IAAjBD,EAAMG,QAAiBH,EAAMI,WAAW,KAM/CN,GAAgB,IAEhBA,GAAgB,GAChBxB,EAAY2B,GACZ1B,EAAe,KAeT8B,MAAOR,EACPN,MAAM,MACNe,KAAK,SACLd,QAAQ,cAKbnB,GACC,6BACE,kBAACoB,EAAA,EAAD,CAAOV,MAAO,CAAEW,QAAS,SAAWrB,M,yBCG/BkC,EA7C8B,SAAC,GAKvC,IAJLlC,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,eACAC,EACI,EADJA,UAOA,OACE,6BAASA,UAAWA,GAClB,6BACE,8BACE,kBAAC,IAAD,CAA0BC,SAAS,UADrC,4BAGEJ,GACA,kBAACK,EAAA,EAAD,CACEC,QAAS6B,EACT3B,eAAgB,SAACC,GAAD,MACd,iBAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAQ2B,kBAAX,oBAAiC3B,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAQ4B,mBAAsB,IAEjE3B,MAAO,CAAEC,MAAO,KAChBC,SAlBc,SAACC,EAAQC,GAC/Bb,EAAY,GAAD,cAAIa,QAAJ,IAAIA,OAAJ,EAAIA,EAAOsB,kBAAX,oBAAiCtB,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAOuB,mBACnDnC,EAAe,IAiBPa,YAAa,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,MAAM,yBACNC,QAAQ,kBAOjBnB,GACC,6BACE,kBAACoB,EAAA,EAAD,CAAOV,MAAO,CAAEW,QAAS,SAAWrB,M,kCCtCxCsC,EAASC,aAAa,SAACC,GAAD,MAAmB,CAC7CC,KAAM,CACJpB,QAAS,OACT,8BAA+B,CAC7BA,QAAS,MACTqB,UAAW,OACXC,aAAc,UACdC,OAAQ,mBAGZC,MAAO,CACLC,QAAS,OACT,mBAAoB,CAClBC,WAAY,SAGhBC,OAAQ,CACNC,MAAOT,EAAMU,QAAQC,gBAAgBC,IAAW,MAChDC,gBAAiBD,IAAW,MAE9BE,IAAK,CACHlD,SAAU,QAEZmD,KAAM,CACJT,QAAS,OACTU,cAAe,SACf,qBAAsB,CACpBT,WAAY,QAEd,QAAS,CACPU,SAAU,WACVC,IAAK,YA+DIC,EA/CHC,YAAWtB,EAAXsB,EAAmB,YAA6B,IAA1BC,EAAyB,EAAzBA,QAAyB,EACnBtC,mBAAiB,GADE,mBAClDuC,EADkD,KACrC5D,EADqC,OAEfqB,mBAAwB,MAFT,mBAElDwC,EAFkD,KAEnCC,EAFmC,OAGfzC,mBAAwB,MAHT,mBAGlD0C,EAHkD,KAGnCC,EAHmC,OAIf3C,mBAAwB,MAJT,mBAIlD4C,EAJkD,KAInCC,EAJmC,KAMzD,OACE,yBAAKjE,UAAW0D,EAAQpB,MACtB,6BAAStC,UAAW0D,EAAQhB,OAC1B,6BACE,kBAACwB,EAAA,EAAD,CAAQC,IAAI,MAAMnE,UAAW0D,EAAQP,KACnC,gDAGJ,6BACE,kBAACe,EAAA,EAAD,CAAQC,IAAI,MAAMnE,UAAW0D,EAAQb,QAArC,QAKH,CACC,kBAAC,EAAD,CACE7C,UAAW0D,EAAQN,KACnBgB,IAAI,QACJvE,SAAU+D,EACV9D,YAAa+D,EACb9D,eAAgBA,IAElB,kBAAC,EAAD,CACEC,UAAW0D,EAAQN,KACnBgB,IAAI,QACJvE,SAAUiE,EACVhE,YAAaiE,EACbhE,eAAgBA,IAElB,kBAAC,EAAD,CACEC,UAAW0D,EAAQN,KACnBgB,IAAI,QACJvE,SAAUmE,EACVlE,YAAamE,EACblE,eAAgBA,KAElBsE,MAAM,EAAGV,EAAc,OCrFXW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACL0D,QAAQ1D,MAAMA,EAAM2D,c","file":"static/js/main.44036b07.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { IStepProps } from \"./StepType\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DomainRoundedIcon from \"@material-ui/icons/DomainRounded\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport cantons from \"../cantons.json\";\n\nconst Step0: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n}) => {\n  const onChangeHandler = (e: any, value: any) => {\n    setResponse(value);\n    setCurrentStep(1);\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <DomainRoundedIcon fontSize=\"large\" /> Im welchem Kanton wohnst du ?\n        </span>\n        {!response && (\n          <Autocomplete\n            options={cantons}\n            getOptionLabel={(option: string) => option}\n            style={{ width: 300 }}\n            onChange={onChangeHandler}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Wähle bitte deinen Kanton\"\n                variant=\"outlined\"\n              />\n            )}\n          />\n        )}\n      </div>\n\n      {response && (\n        <div>\n          <Paper style={{ padding: \"20px\" }}>{response}</Paper>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Step0;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { IStepProps } from \"./StepType\";\nimport Paper from \"@material-ui/core/Paper\";\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst Step1: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n}) => {\n  const [isInvalidInput, setInvalidInput] = useState<boolean>(false);\n\n  const validation = (input: any) =>\n    input && input.length === 4 && !input.startsWith(\"0\");\n\n  const onChangeHandler = (event: any) => {\n    const enteredZip = event.target.value;\n\n    if (!validation(enteredZip)) {\n      setInvalidInput(true);\n    } else {\n      setInvalidInput(false);\n      setResponse(enteredZip);\n      setCurrentStep(2);\n    }\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <RoomRoundedIcon fontSize=\"large\" /> Was ist die Postleitzahl deines\n          Wohnortes ?\n        </span>\n\n        {!response && (\n          <TextField\n            onChange={onChangeHandler}\n            error={isInvalidInput}\n            label=\"PLZ\"\n            type=\"number\"\n            variant=\"outlined\"\n          />\n        )}\n      </div>\n\n      {response && (\n        <div>\n          <Paper style={{ padding: \"20px\" }}>{response}</Paper>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Step1;\n","import React, { FunctionComponent } from \"react\";\nimport { IStepProps } from \"./StepType\";\nimport Paper from \"@material-ui/core/Paper\";\nimport LocalHospitalRoundedIcon from \"@material-ui/icons/LocalHospitalRounded\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport physicians from \"../physicians.json\";\n\nconst Step2: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n}) => {\n  const onChangeHandler = (e: any, value: any) => {\n    setResponse(`${value?.ProductDoctorname}, ${value?.ProductDoctorCom}`);\n    setCurrentStep(2);\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <LocalHospitalRoundedIcon fontSize=\"large\" /> Wähle deinen Artz ?\n        </span>\n        {!response && (\n          <Autocomplete\n            options={physicians}\n            getOptionLabel={(option: any) =>\n              `${option?.ProductDoctorname}, ${option?.ProductDoctorCom}` || \"\"\n            }\n            style={{ width: 300 }}\n            onChange={onChangeHandler}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Suche nach deinem Artz\"\n                variant=\"outlined\"\n              />\n            )}\n          />\n        )}\n      </div>\n\n      {response && (\n        <div>\n          <Paper style={{ padding: \"20px\" }}>{response}</Paper>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Step2;\n","import React, { useState } from \"react\";\nimport Step0 from \"./Steps/Step0\";\nimport Step1 from \"./Steps/Step1\";\nimport Step2 from \"./Steps/Step2\";\nimport { WithStyles, withStyles, createStyles, Theme } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { deepOrange } from \"@material-ui/core/colors\";\n\nconst styles = createStyles((theme: Theme) => ({\n  root: {\n    padding: \"20px\",\n    \"&>section:not(:first-child)\": {\n      padding: \"5px\",\n      marginTop: \"30px\",\n      borderRadius: \"6px 6px\",\n      border: \"1px solid grey\",\n    },\n  },\n  lanes: {\n    display: \"flex\",\n    \"&>div:last-child\": {\n      marginLeft: \"auto\",\n    },\n  },\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  bot: {\n    fontSize: \"35px\",\n  },\n  step: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"&>div:nth-child(2)\": {\n      marginLeft: \"auto\",\n    },\n    \"& svg\": {\n      position: \"relative\",\n      top: \"6px\",\n    },\n  },\n}));\n\ninterface IAppProps extends WithStyles<typeof styles> {\n  classes: {\n    root: string;\n    lanes: string;\n    orange: string;\n    bot: string;\n    step: string;\n  };\n}\n\n// @ts-ignore\nconst App = withStyles(styles)(({ classes }: IAppProps) => {\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [step0Response, setStep0Response] = useState<string | null>(null);\n  const [step1Response, setStep1Response] = useState<string | null>(null);\n  const [step2Response, setStep2Response] = useState<string | null>(null);\n\n  return (\n    <div className={classes.root}>\n      <section className={classes.lanes}>\n        <div>\n          <Avatar alt=\"bot\" className={classes.bot}>\n            <span>🤖</span>\n          </Avatar>\n        </div>\n        <div>\n          <Avatar alt=\"you\" className={classes.orange}>\n            Du\n          </Avatar>\n        </div>\n      </section>\n      {[\n        <Step0\n          className={classes.step}\n          key=\"step0\"\n          response={step0Response}\n          setResponse={setStep0Response}\n          setCurrentStep={setCurrentStep}\n        />,\n        <Step1\n          className={classes.step}\n          key=\"step1\"\n          response={step1Response}\n          setResponse={setStep1Response}\n          setCurrentStep={setCurrentStep}\n        />,\n        <Step2\n          className={classes.step}\n          key=\"step2\"\n          response={step2Response}\n          setResponse={setStep2Response}\n          setCurrentStep={setCurrentStep}\n        />,\n      ].slice(0, currentStep + 1)}\n    </div>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}