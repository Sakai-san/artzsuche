{"version":3,"sources":["ducks/physicians/types.ts","Steps/Step0.tsx","Steps/Step1.tsx","Steps/Step2.tsx","ducks/physicians/actions.ts","ducks/physicians/operations.ts","ducks/physicians/index.ts","ducks/physicians/reducers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["actionTypes","Step0","response","setResponse","setCurrentStep","className","fontSize","Paper","style","padding","Autocomplete","options","cantons","getOptionLabel","option","width","onChange","e","value","renderInput","params","TextField","label","variant","Step1","useState","isInvalidInput","setInvalidInput","event","input","enteredZip","target","length","startsWith","error","type","Step2","physicians","ProductDoctorname","ProductDoctorCom","isFetchAction","action","PHYSICIANS_FETCH","result","payload","dispatch","fetch","then","r","json","actions","physiciansReducer","state","useStyles","makeStyles","theme","toolbar","backgroundColor","minHeight","title","flexGrow","content","marginTop","borderRadius","lanes","display","marginLeft","orange","color","palette","getContrastText","deepOrange","bot","step","flexDirection","position","top","App","classes","currentStep","step0Response","setStep0Response","step1Response","setStep1Response","step2Response","setStep2Response","useDispatch","useEffect","physiciansOperations","AppBar","Toolbar","Typography","Avatar","alt","key","slice","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","ducks","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.791df50e.chunk.js","sourcesContent":["export enum actionTypes {\n  PHYSICIANS_FETCH = \"@PHYSICIANS/fetch\",\n}\n\nexport interface IPhysician {\n  ProductDoctorname?: string;\n  ProductDoctorId?: number;\n  ProductDoctorAddress?: string;\n  ProductDoctorZip?: string;\n  ProductDoctorCom?: string;\n  Phone?: string;\n  TariffName?: string;\n}\n\nexport type IPhysicianStore = IPhysician[];\n\ninterface IAction {\n  type: actionTypes;\n}\n\ninterface IActionFetch extends IAction {\n  payload: IPhysician[];\n}\n\n// TYPE GUARDS\nexport const isFetchAction = (action: IAction): action is IActionFetch =>\n  action.type === actionTypes.PHYSICIANS_FETCH;\n","import React, { FunctionComponent } from \"react\";\nimport { IStepProps } from \"./StepType\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DomainRoundedIcon from \"@material-ui/icons/DomainRounded\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport cantons from \"../cantons.json\";\n\nconst Step0: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n}) => {\n  const onChangeHandler = (e: any, value: any) => {\n    setResponse(value);\n    setCurrentStep(1);\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <DomainRoundedIcon fontSize=\"large\" /> Im welchem Kanton wohnst du ?\n        </span>\n      </div>\n\n      <div>\n        {response ? (\n          <Paper style={{ padding: \"20px\" }}>{response}</Paper>\n        ) : (\n          <Autocomplete\n            options={cantons}\n            getOptionLabel={(option: string) => option}\n            style={{ width: 300 }}\n            onChange={onChangeHandler}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Wähle bitte deinen Kanton\"\n                variant=\"outlined\"\n              />\n            )}\n          />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Step0;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { IStepProps } from \"./StepType\";\nimport Paper from \"@material-ui/core/Paper\";\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst validation = (input: string | undefined) =>\n  input && input.length === 4 && !input.startsWith(\"0\");\n\nconst Step1: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n}) => {\n  const [isInvalidInput, setInvalidInput] = useState<boolean>(false);\n\n  const onChangeHandler = (event: any) => {\n    const enteredZip = event.target.value;\n\n    if (!validation(enteredZip)) {\n      setInvalidInput(true);\n    } else {\n      setInvalidInput(false);\n      setResponse(enteredZip);\n      setCurrentStep(2);\n    }\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <RoomRoundedIcon fontSize=\"large\" /> Was ist die Postleitzahl deines\n          Wohnortes ?\n        </span>\n      </div>\n\n      <div>\n        {response ? (\n          <Paper style={{ padding: \"20px\" }}>{response}</Paper>\n        ) : (\n          <TextField\n            onChange={onChangeHandler}\n            error={isInvalidInput}\n            label=\"PLZ\"\n            type=\"number\"\n            variant=\"outlined\"\n          />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Step1;\n","import React, { FunctionComponent } from \"react\";\nimport { IStepProps } from \"./StepType\";\nimport Paper from \"@material-ui/core/Paper\";\nimport LocalHospitalRoundedIcon from \"@material-ui/icons/LocalHospitalRounded\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport physicians from \"../physicians.json\";\nimport { IPhysician } from \"../types/phyisician\";\n\nconst Step2: FunctionComponent<IStepProps> = ({\n  response,\n  setResponse,\n  setCurrentStep,\n  className,\n}) => {\n  const onChangeHandler = (e: any, value: any) => {\n    setResponse(`${value?.ProductDoctorname}, ${value?.ProductDoctorCom}`);\n    setCurrentStep(2);\n  };\n\n  return (\n    <section className={className}>\n      <div>\n        <span>\n          <LocalHospitalRoundedIcon fontSize=\"large\" /> Wähle einen Artz / eine\n          Artzin ?\n        </span>\n      </div>\n\n      <div>\n        {response ? (\n          <Paper style={{ padding: \"20px\" }}>{response}</Paper>\n        ) : (\n          <Autocomplete\n            options={physicians}\n            getOptionLabel={(option: IPhysician) =>\n              `${option?.ProductDoctorname}, ${option?.ProductDoctorCom}` || \"\"\n            }\n            style={{ width: 300 }}\n            onChange={onChangeHandler}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Suche nach einem/er Artz/in\"\n                variant=\"outlined\"\n              />\n            )}\n          />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Step2;\n","import { actionTypes, IPhysician } from \"./types\";\n\nconst makePhysiciansFetch = (result: IPhysician[]) => ({\n  type: actionTypes.PHYSICIANS_FETCH,\n  payload: result,\n});\n\nexport default {\n  makePhysiciansFetch,\n};\n","import { Dispatch } from \"redux\";\nimport actions from \"./actions\";\n\nconst fetchPhysicians = (dispatch: Dispatch) => {\n  fetch(\"https://sakai-san.github.io/sharedatadifferentroutes/books.json\")\n    .then((r) => r.json())\n    .then((r) => dispatch(actions.makePhysiciansFetch(r || [])));\n};\n\nexport default { fetchPhysicians };\n","import physiciansReducer from \"./reducers\";\nexport { default as physiciansActions } from \"./actions\";\nexport { default as physiciansOperations } from \"./operations\";\nexport default physiciansReducer;\n","import { Reducer } from \"redux\";\nimport actions from \"./actions\";\nimport { IPhysicianStore, isFetchAction } from \"./types\";\n\nconst reducer: Reducer<\n  IPhysicianStore,\n  ReturnType<typeof actions.makePhysiciansFetch>\n> = (state = [], action) => {\n  if (isFetchAction(action)) {\n    return {\n      ...action.payload,\n    };\n  } else {\n    return state;\n  }\n};\n\nexport default reducer;\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport Step0 from \"./Steps/Step0\";\nimport Step1 from \"./Steps/Step1\";\nimport Step2 from \"./Steps/Step2\";\nimport { useDispatch } from \"react-redux\";\nimport { Theme, makeStyles } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ForumIcon from \"@material-ui/icons/Forum\";\nimport { deepOrange } from \"@material-ui/core/colors\";\nimport { physiciansOperations } from \"./ducks/physicians\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  toolbar: {\n    backgroundColor: \"#FF51A1\",\n    minHeight: 80,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    padding: \"20px\",\n    \"&>section:not(:first-child)\": {\n      padding: \"5px\",\n      marginTop: \"30px\",\n      borderRadius: \"6px 6px\",\n    },\n  },\n  lanes: {\n    display: \"flex\",\n    \"&>div:last-child\": {\n      marginLeft: \"auto\",\n    },\n  },\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  bot: {\n    fontSize: \"35px\",\n  },\n  step: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"&>div:nth-child(2)\": {\n      marginLeft: \"auto\",\n    },\n    \"& svg\": {\n      position: \"relative\",\n      top: \"6px\",\n    },\n  },\n}));\n\nconst App: FunctionComponent = () => {\n  const classes = useStyles();\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [step0Response, setStep0Response] = useState<string | null>(null);\n  const [step1Response, setStep1Response] = useState<string | null>(null);\n  const [step2Response, setStep2Response] = useState<string | null>(null);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(physiciansOperations.fetchPhysicians);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n            Lass uns dikutieren\n          </Typography>\n          <ForumIcon />\n        </Toolbar>\n      </AppBar>\n\n      <div className={classes.content}>\n        <section className={classes.lanes}>\n          <div>\n            <Avatar alt=\"bot\" className={classes.bot}>\n              <span>&#129302;</span>\n            </Avatar>\n          </div>\n          <div>\n            <Avatar alt=\"you\" className={classes.orange}>\n              Du\n            </Avatar>\n          </div>\n        </section>\n        {[\n          <Step0\n            className={classes.step}\n            key=\"step0\"\n            response={step0Response}\n            setResponse={setStep0Response}\n            setCurrentStep={setCurrentStep}\n          />,\n          <Step1\n            className={classes.step}\n            key=\"step1\"\n            response={step1Response}\n            setResponse={setStep1Response}\n            setCurrentStep={setCurrentStep}\n          />,\n          <Step2\n            className={classes.step}\n            key=\"step2\"\n            response={step2Response}\n            setResponse={setStep2Response}\n            setCurrentStep={setCurrentStep}\n          />,\n        ].slice(0, currentStep + 1)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport * as ducks from \"./ducks/index\";\nimport { compose, createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers(ducks),\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}